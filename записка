1)  Для эффективных анимаций был использован модуль pyganim https://inventwithpython.com/pyganim/
Он использовался не так часто, и он не так полезен. Это просто лёгкий способ добавить анимации к спрайтам. Можно сделать без этого модуля, но это не так быстро и кратко.
В модуле pyganim используется класс PygAnimation.

2) По классам разделены различные классы игры. В файле monsters.py хранится класс Monster (движающийся объект, касание - смерть). В файле player.py хранится класс самого персонажа. В файле blocks.py хранятся класс Platforms (сами блоки), от них наследуются классы Princess и BlockDie (при касании принцессы - победы, при касании BlockDie - смерть). 

3) Игра запускается с файла main.py. Функция load_level загружает из одного текстового файла нахождение BlockDie, Platforms и Princess, и вообще размер уровня, а из другого координаты монстров и персонажа.  Сам уровень сохраняется в список списков level. 
В главной функции мы сохраняем координаты платформ в отдельный класс и добавляем их в группы спрайтов. 
Чуть-чуть об этих группах: entities - группа в которые добавляются все спрайты, animatedEntities - монстры, Platforms - группа где спрайты класса Platform (и наследуемые от него)
По поводу главного цикла, там идёт проверка на то, какие кнопки зажаты, далее обновляются координаты персонажа (отдельный аргумент класса Player), и обновление координаты монстра (информация о них ниже). Также дальше идёт цикл по всем спрайтам и идёт рисование в маленьком прямоугольнике (поле зрение игрока) спрайтов.

Краткий экскурс по классам:
1)  Camera (взята и улучшена из урока я.лицея)
Update – централизует камеру на персонаже
Apply  - обрисовывает объекты в поле зрения игрока (из-за чего создаётся впечатление что камера идет)
Camera_configure – функция, возвращающая прямоугольник, который изменяется если мы на границе уровня

2)  Platforms
Я не буду подробно рассматривать каждый дочерний класс. Princess – это платформа при касании с которой, происходит победа; BlockDie – платформа, при касании – смерть (волшебная функция isinstance в помощь)
Сам предок Platform – также непримечателен, работа с ним происходит в классе Player (самое интересное)

3)  Monster
Класс, для которого созданотдельная группа спрайтов (информация выше).
Начнём с атрибутов класса: координаты, скорость по осям, максимальная длина и ширина, который может пройти монстр. Когда это граница пройдена он идёт обратно.
Столкновение: если монстр касается объекта класса Platform (или его дочерние классы) он тоже идёт назад
4)  Player (уряяя) 
Атрибуты: координаты персонажа по X и по Y
Метод update – производится каждый оборот цикла. Задаются параметры нажатия клавиш (прыжок, лево, вправо), в зависимости от состояния клавиши задаётся анимация (если лево то одна, если право, то другая, если ни то и ни то, то третья), и задаётся скорость, которая передаётся в метод collide
Метод collide – производится и изменяет что-то если герой коснулся чего-то. При касании монстра и BlockDie происходит смерть, при касании принцессы – победа. Если герой чего-то коснулся, но это не монстр, не принцесса и не пила (BlockDie), то это герой упёрся в платформу. И скорость в ту сторону по Y пропадает

